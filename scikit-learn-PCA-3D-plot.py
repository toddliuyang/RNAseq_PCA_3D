import sys
import matplotlib.pyplot as plt
import numpy as np
from sklearn.decomposition import PCA
from mpl_toolkits.mplot3d import Axes3D 
from mpl_toolkits.mplot3d import art3d

##format of file containing tab-delimited expression data:
#gene_id	n_10	n_11	n_12	n_13	n_1	n_20	n_21	n_22	n_23	n_24	n_25	n_26	n_27	n_29	n_2	n_30	n_3	n_5	n_9
#LOC101061097	9.17697513707343	9.18588705931995	9.06938610559502	9.13209146199769	9.24521443533918	9.05716241013815	9.04518323723263	9.01096526774954	8.9586960300008	9.00436382651322	9.04962836377994	9.08159968651092	9.10748588645425	8.97185225262558	9.12798274803742	9.08598620596351	9.13827745257748	9.34566085108872	9.1531687740016
#LOC101061262	9.39020409663672	9.68151534048785	9.71077547414226	9.49537269356677	9.64524018136906	9.56426982608379	9.33917086956496	9.49558399759145	9.2480587143647	9.50981070872674	9.07377119062888	9.39424921663679	9.25558906213691	8.98382573702164	9.57353856574877	9.11754968913561	9.79795608365635	9.54081220274761	9.80666905913331
#LOC101061569	9.04173499944845	9.17651314946673	9.11465858197065	8.90603806603278	9.26646801641988	9.16137583909394	9.13032240346078	9.16483634285475	8.949103103009	9.14953274449658	8.93679624370481	9.11452019741168	9.06602484794048	8.85416671404658	9.31551022821301	8.82468293998277	9.25184126135335	9.25422418972292	9.11804254179544
#LOC101061888	9.29315535432569	9.22574475922527	9.06071610047589	8.83906787549033	9.30342416158863	8.77629471321486	9.04884637304715	8.79012287854925	8.9586960300008	8.94774784512737	8.86627198986845	8.90280340921943	8.99262841708978	8.90597934577985	9.09502777750408	9.14131265076611	9.28524966917919	9.3740089935715	8.89627812369959
#LOC101063282	9.01600314980243	9.04801532947683	9.09222237501943	9.1812872702995	9.05588491947621	8.98356890530198	9.27625677841855	9.28002720017462	9.23078841194931	9.2725455807132	9.63945854767788	9.65734921358002	9.46252795412137	9.51933900277542	9.07144465761429	9.01523082692467	9.22990634388867	9.05552899666991	9.14073319841174
#LOC101063331	9.64358265837119	9.72800314438857	9.71609916703473	9.66041256623695	9.54255312196114	9.59985290621445	9.78785526058613	9.72892898339818	9.69430133414828	9.66193216138669	9.4711467700954	9.53219028366489	9.59044635781656	9.50074653505684	9.53103097692895	9.40290553995273	9.58752306666559	9.67999727982693	9.70406386139498
#

#load matrix of normalized expression.

if len(sys.argv)>1:
    file_name=sys.argv[1]
else:
    file_name='expression_data.txt' #file containing expression data.
    
li_data=list()
li_headers=list()
with open(file_name,'r') as f:
    for text in f:
        if not li_headers:
            li_headers=text.strip().split('\t')
            continue
        li_temp=text.strip().split('\t')
        li_temp_float=list()
        for x in li_temp[1:]:
            li_temp_float.append(float(x))
        li_data.append(li_temp_float)

#sample names, setting colors and size for scatter plot.
labels=li_headers[1:]
colors=['red']*len(labels)
s=[100]*len(labels)

#PCA analysis
Z=np.array(li_data)
Z_t=Z.transpose()
pca=PCA(n_components=len(labels)-1)
X_r=pca.fit(Z_t).transform(Z_t)
#Percentage of variance explained for each components
print('explained variance ratio: %s'  %str(pca.explained_variance_ratio_))

#Set PCA dimension for plot
li_PCA=[0,1,2]

#Plot
fig=plt.figure()
ax=fig.add_subplot(111, projection='3d')
ax.scatter(X_r[:,li_PCA[0]], X_r[:,li_PCA[1]], X_r[:,li_PCA[2]],c=colors,s=s)
for i in range(len(labels)):
    ax.text3D(X_r[i,li_PCA[0]], X_r[i,li_PCA[1]], X_r[i,li_PCA[2]], labels[i],fontsize='small',zdir='x',verticalalignment='bottom',horizontalalignment='left')
ax.set_xlabel('PCA'+str(li_PCA[0]+1)+':'+str(pca.explained_variance_ratio_[li_PCA[0]]))
ax.set_ylabel('PCA'+str(li_PCA[1]+1)+':'+str(pca.explained_variance_ratio_[li_PCA[1]]))
ax.set_zlabel('PCA'+str(li_PCA[2]+1)+':'+str(pca.explained_variance_ratio_[li_PCA[2]]))
plt.show()

